package com.scuyjzh.leetcode.medium.No_0091_Decode_Ways;

/**
 * 91. 解码方法
 *
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 *   'A' -> 1
 *   'B' -> 2
 *   ...
 *   'Z' -> 26
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字
 * 母（可能有多种方法）。例如，"11106" 可以映射为：
 *     • "AAJF" ，将消息分组为 (1 1 10 6)
 *     • "KJF" ，将消息分组为 (11 10 6)
 * 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是
 * 由于 "6" 和 "06" 在映射中并不等价。
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
 * 题目数据保证答案肯定是一个 32 位 的整数。
 */
class Solution {
    /**
     * 方法一：动态规划
     */
    public int numDecodings1(String s) {
        /*
         * 对于给定的字符串 s，设它的长度为 n，其中的字符从左到右依次为 s[1],s[2],⋯,s[n]。可以使用动态规
         * 划的方法计算出字符串 s 的解码方法数。
         *
         * 具体地，设 f(i) 表示字符串 s 的前 i 个字符 s[1..i] 的解码方法数。在进行状态转移时，可以考虑最后一次
         * 解码使用了 s 中的哪些字符，那么会有下面的两种情况：
         *   • 第一种情况是使用了一个字符，即 s[i] 进行解码，那么只要 s[i] != 0，它就可以被解码成 A∼I 中
         *     的某个字母。由于剩余的前 i−1 个字符的解码方法数为 f(i-1)，因此可以写出状态转移方程：
         *             f(i) = f(i-1)，其中 s[i] != 0
         *   • 第二种情况是使用了两个字符，即 s[i−1] 和 s[i] 进行编码。与第一种情况类似，s[i−1] 不能等于
         *     0，并且 s[i−1] 和 s[i] 组成的整数必须小于等于 26，这样它们就可以被解码成 J∼Z 中的某个字母。
         *     由于剩余的前 i−2 个字符的解码方法数为 f(i-2)，因此可以写出状态转移方程：
         *             f(i) = f(i-2)，其中 s[i-1] != 0 并且 10⋅s[i−1] + s[i] ≤ 26
         *     需要注意的是，只有当 i>1 时才能进行转移，否则 s[i−1] 不存在。
         *
         * 将上面的两种状态转移方程在对应的条件满足时进行累加，即可得到 f(i) 的值。在动态规划完成后，最终的答
         * 案即为 f(n)。
         *
         * 动态规划的边界条件为：f(0)=1。即空字符串可以有 1 种解码方法，解码出一个空字符串。
         *
         * 同时，由于在大部分语言中，字符串的下标是从 0 而不是 1 开始的，因此在代码的编写过程中，需要将
         * 所有字符串的下标减去 1，与使用的语言保持一致。
         */
        int n = s.length();
        int[] f = new int[n + 1];
        f[0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s.charAt(i - 1) != '0') {
                f[i] += f[i - 1];
            }
            if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26)) {
                f[i] += f[i - 2];
            }
        }
        return f[n];
    }

    /**
     * 方法二：动态规划 + 空间优化
     */
    public int numDecodings2(String s) {
        // 注意到在状态转移方程中，f(i) 的值仅与 f(i-1) 和 f(i-2) 有关
        // 因此可以使用三个变量进行状态转移，省去数组的空间
        int n = s.length();
        // a = f[i-2], b = f[i-1], c=f[i]
        int a = 0, b = 1, c = 0;
        for (int i = 1; i <= n; ++i) {
            c = 0;
            if (s.charAt(i - 1) != '0') {
                c += b;
            }
            if (i > 1 && s.charAt(i - 2) != '0' && ((s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26)) {
                c += a;
            }
            a = b;
            b = c;
        }
        return c;
    }

    public static void main(String[] args) {
        System.out.println(new Solution().numDecodings1("12"));
        System.out.println(new Solution().numDecodings1("226"));
        System.out.println(new Solution().numDecodings2("0"));
        System.out.println(new Solution().numDecodings2("06"));
    }
}
