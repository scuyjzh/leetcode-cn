package com.scuyjzh.leetcode.medium.No_0309_Best_Time_to_Buy_and_Sell_Stock_with_Cooldown;

/**
 * 309. 最佳买卖股票时机含冷冻期
 *
 * 给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。
 *
 * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完
 * 成更多的交易（多次买卖一支股票）:
 *   • 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *   • 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
 */
class Solution {
    /**
     * 方法一：动态规划
     */
    public int maxProfit1(int[] prices) {
        /*
         * 一种常用的方法是将「买入」和「卖出」分开进行考虑：「买入」为负收益，而「卖出」为正收益。在初入
         * 股市时，只有「买入」的权利，只能获得负收益。而当「买入」之后，就有了「卖出」的权利，可以
         * 获得正收益。显然，需要尽可能地降低负收益而提高正收益，因此目标总是将收益值最大化。因
         * 此，可以使用动态规划的方法，维护在股市中每一天结束后可以获得的「累计最大收益」，并以此进行
         * 状态转移，得到最终的答案。
         *
         * 一、状态定义
         * 用 f[i] 表示第 i 天结束之后的「累计最大收益」。根据题目描述，由于最多只能同时买入（持有）
         * 一支股票，并且卖出股票后有冷冻期的限制，因此会有三种不同的状态：
         *   • 目前持有一支股票，对应的「累计最大收益」记为 f[i][0]；
         *   • 目前不持有任何股票，并且处于冷冻期中，对应的「累计最大收益」记为 f[i][1]；
         *   • 目前不持有任何股票，并且不处于冷冻期中，对应的「累计最大收益」记为 f[i][2]。
         * 这里的「处于冷冻期」指的是在第 i 天结束之后的状态。也就是说：如果第 i 天结束之后处于冷冻期，
         * 那么第 i+1 天无法买入股票。
         *
         * 二、状态转移
         * 在第 i 天时，可以在不违反规则的前提下进行「买入」或者「卖出」操作，此时第 i 天的状态会从
         * 第 i−1 天的状态转移而来；也可以不进行任何操作，此时第 i 天的状态就等同于第 i−1 天的状态。
         * 那么分别对这三种状态进行分析：
         * • 对于 f[i][0]，目前持有的这一支股票可以是在第 i−1 天就已经持有的，对应的状态为 f[i−1][0]；
         *   或者是第 i 天买入的，那么第 i−1 天就不能持有股票并且不处于冷冻期中，对应的状态为 f[i−1][2]
         *   加上买入股票的负收益 prices[i]。因此状态转移方程为：
         *       f[i][0] = max(f[i−1][0], f[i−1][2] − prices[i])
         *
         * • 对于 f[i][1]，在第 i 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 i−1 天时必须
         *   持有一支股票，对应的状态为 f[i−1][0] 加上卖出股票的正收益 prices[i]。因此状态转移方程为：
         *       f[i][1] = f[i−1][0] + prices[i]
         *
         * • 对于 f[i][2]，在第 i 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即
         *   第 i−1 天时不持有任何股票：如果处于冷冻期，对应的状态为 f[i−1][1]；如果不处于冷冻期，对应的
         *   状态为 f[i−1][2]。因此状态转移方程为：
         *       f[i][2] = max(f[i−1][1], f[i−1][2])
         *
         * 这样就得到了所有的状态转移方程。如果一共有 n 天，那么最终的答案即为 max(f[n−1][0], f[n−1][1],
         * f[n−1][2])。注意到如果在最后一天（第 n−1 天）结束之后，手上仍然持有股票，那么显然是没有任何意义的。
         * 因此更加精确地，最终的答案实际上是 f[n−1][1] 和 f[n−1][2] 中的较大值，即 max(f[n−1][1],
         * f[n−1][2])。
         *
         * 三、状态初始化
         * 可以将第 0 天的情况作为动态规划中的边界条件：
         *   • 在第 0 天时，如果持有股票，那么只能是在第 0 天买入的，对应负收益 −prices[0]，即 f[0][0] =
         *     −prices[0]；
         *   • 如果不持有股票，那么收益为零，即 f[0][1] = 0, f[0][2] = 0。
         * 注意到第 0 天实际上是不存在处于冷冻期的情况的，但仍然可以将对应的状态 f[0][1] 置为零。
         *
         * 这样就可以从第 1 天开始，根据上面的状态转移方程进行动态规划，直到计算出第 n−1 天的结果。
         */
        if (prices.length == 0) {
            return 0;
        }

        int n = prices.length;
        // 状态定义
        // f[i][0]: 手上持有股票的最大收益
        // f[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益
        // f[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益
        int[][] f = new int[n][3];

        // 状态初始化
        f[0][0] = -prices[0];
        f[0][1] = Integer.MIN_VALUE;
        f[0][2] = 0;

        // 从第 1 天开始进行状态转移
        for (int i = 1; i < n; ++i) {
            f[i][0] = Math.max(f[i - 1][0], f[i - 1][2] - prices[i]);
            f[i][1] = f[i - 1][0] + prices[i];
            f[i][2] = Math.max(f[i - 1][1], f[i - 1][2]);
        }

        return Math.max(f[n - 1][1], f[n - 1][2]);
    }

    /**
     * 方法二：动态规划 + 空间优化
     */
    public int maxProfit2(int[] prices) {
        /*
         * 空间优化：
         * 注意到上面的状态转移方程中，f[i][..] 只与 f[i−1][..] 有关，而与 f[i−2][..] 及之前的所有状态都
         * 无关，因此不必存储这些无关的状态。也就是说，只需要将 f[i−1][0]、f[i−1][1]、f[i−1][2] 存放在三个
         * 变量中，通过它们计算出 f[i][0]、f[i][1]、f[i][2] 并存回对应的变量，以便于第 i+1 天的状态转移即可。
         */
        if (prices.length == 0) {
            return 0;
        }

        int n = prices.length;
        int f0 = -prices[0];
        int f1 = Integer.MIN_VALUE;
        int f2 = 0;
        for (int i = 1; i < n; ++i) {
            int newf0 = Math.max(f0, f2 - prices[i]);
            int newf1 = f0 + prices[i];
            int newf2 = Math.max(f1, f2);
            f0 = newf0;
            f1 = newf1;
            f2 = newf2;
        }

        return Math.max(f1, f2);
    }

    public static void main(String[] args) {
        System.out.println(new Solution().maxProfit1(new int[]{1, 2, 3, 0, 2}));
        System.out.println(new Solution().maxProfit2(new int[]{1, 2, 3, 0, 2}));
    }
}
